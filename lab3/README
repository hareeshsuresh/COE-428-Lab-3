My summary of accomplishments for lab 3:
This lab worked correctly for the sorting algorithms for MergeSort and Insertion Sort. Initially, I faced a major bug that was preventing me from running my executable. When I ran the file name of  insertionSort, my program kept saying "permission denied: insertion sort". After much consultation with my peers, I learned that Pascal does not allow you to run executable files anymore. Hence, I had to go to my student directory which is "pascal:/home/student1/hsuresh>" then typed in "ssh leko" from there I hit yes to continue connecting. As well as, I entered my ee Ryerson password. After navigating to lab3 in my coe428 folder, I learned that if I just run my executable then my program won't terminate, to locate end of file, you have to type in "Ctrl+D" which results in 0 comparisons, swaps and copy operations. This indicated that my insertionSort works correctly because I passed no input to my file. There are two ways to enter unsorted numbers and get a sorted output. One way is to make a textfile using any name, in this case I used "into" and you enter unsorted  numbers to the file. When you run your executable, you type in "executable <textfilename". Doing so, will display onto the screen a sorted list. The second way of running your executable is to type in the executable name, press enter and then type in unsorted numbers separated by spaces. After that, enter "Ctrl+D" to indicate the End of File(EOF) command. Now, you will have a sorted list of numbers appear on your screen.

Analysis of the Sorting Algorithms:
The best case for a sorting algorithm is when all the numbers are sorted. The worst case is when the numbers are reverse sorted. The average case is when the numbers are moderately sorted. 
1.	Insertion Sort
The best case for an insertion sort when I type in "1,2,3,4,5" results in 4 Comparisons, 0 Swaps and 5 Copy Operations. The time complexity is Omega(n) for the best case of sorting. The worst case when I type in "5,4,3,2,1" results in 10 Comparisons, 10 Swaps and 5 Copy Operations. The time complexity is O(n^2) for the worst case of sorting. The average case when I type in ?1,3,2,5,4? results in 6 Comparisons, 2 Swaps and 5 Copy Operations. The time complexity is sandwiched between O(n^2) and Omega(n) for the average case of sorting. 
2.	Merge Sort

The best case for an insertion sort when I type in "1,2,3,4,5" results in 7 Comparisons, 12 Swaps and 5 Copy Operations. The worst case when I type in "5,4,3,2,1" results in 5 Comparisons, 12 Swaps and 7 Copy Operations. The average case when I type in "1,3,2,5,4" results in 7 Comparisons, 12 Swaps and 5 Copy Operations. From the MergeSort Analysis, it turns out that regardless of what case you are doing, the time complexity is the same. In this case, since you have a binary tree, the time complexity is O(n*log(n)).


